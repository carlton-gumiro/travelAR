<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AR Directions</title>
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://cdn.rawgit.com/jeromeetienne/AR.js/master/aframe/build/aframe-ar.js"></script>
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }
        .text-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 25px 30px;
            background: rgba(0, 0, 0, 0.6);
            border: 2px solid white;
            border-radius: 10px;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
        }
        .icon {
            position: absolute;
            top: calc(50%); /* Adjust to position the icon above the text container */
            left: 50%;
            transform: translate(-50%, -100%); /* Center the icon */
            width: 50px; /* Width of the icon */
            height: 50px; /* Height of the icon */
        }
    </style>
</head>
<body>
    <a-scene embedded arjs='sourceType: webcam; videoTexture: true; debugUIEnabled: false;'>
        <a-entity camera></a-entity>
        <a-entity id="ar-entity"></a-entity>
    </a-scene>

    <script>
        const steps = [{instruction: "Go straight", end_location: {lat: 0, lng: 0}}]; // Sample data
        let currentStep = 0;

        function updateARInstruction(distance) {
            const arEntity = document.getElementById('ar-entity');
            arEntity.innerHTML = ''; // Clear previous entities

            if (currentStep < steps.length) {
                const step = steps[currentStep];
                const instructionText = step.instruction;

                // Create the icon
                const iconSrc = instructionText.toLowerCase().includes("straight") ? 'forward.png' :
                                instructionText.toLowerCase().includes("left") ? 'turn-left.png' :
                                instructionText.toLowerCase().includes("right") ? 'turn-right.png' : 'forward.png';

                const iconElement = document.createElement('a-image');
                iconElement.setAttribute('src', iconSrc);
                iconElement.setAttribute('scale', '0.7 0.7 0.7');
                iconElement.setAttribute('position', '0 1.25 -11'); // Position above the div
                iconElement.setAttribute('look-at', '[camera]');

                // Create the text container
                const textContainer = document.createElement('div');
                textContainer.setAttribute('class', 'text-container');
                textContainer.innerHTML = `<p>${instructionText}</p><p>${distance.toFixed(2)} meters away</p>`;

                arEntity.appendChild(iconElement); // Append the icon
                arEntity.appendChild(textContainer); // Append the text container
            }
        }

        // Mock function to simulate distance
        function checkLocationAndUpdate() {
            const distance = 2; // Example distance for testing
            updateARInstruction(distance);
        }

        window.onload = function() {
            checkLocationAndUpdate(); // Simulate the update on load
        };
    </script>
</body>
</html>